#!/bin/sh


seed=0
length=1000
samples=1
truncate_length=1000
block_length=1
divide_num=2
rnn_file=rnn.dat

program=`basename $0`

display_usage() {
    cat << EOS
$program  - a program to analyze the Kullback-Leibler divergence that measures the distance between output of a recurrent neural network and test data.

Usage: $program [-s seed] [-n length] [-c samples] [-t truncate-length] [-b block-length] [-d divide-num] [-r rnn-file] test-file ...
Usage: $program [-v] [-h]

Available options are:
-s seed
    \`seed' is the seed for the initialization of random number generator, which specifies a starting point for the random number sequence, and provides for restarting at the same point. If this option is omitted, the current system time is used.
-n length
    Iterations of the dynamics. Default is $length.
-c samples
    Number of samples. Default is $samples.
-t truncate-length
    \`truncate-length' is the time steps before evaluating output of the recurrent neural network in order to discard transient effects. Default is $truncate_length.
-b block-length
    Default is $block_length.
-d divide-num
    Default is $divide_num.
-r rnn-file
    The file \`rnn-file' being generated by rnn-learn is used for the initialization of recurrent neural network parameters. Default is \`$rnn_file'.

Program execution:
$program computes the Kullback-Leibler divergence between output of a recurrent neural network and test data. The parameters of the recurrent neural network are given by the rnn-file (ex: rnn.dat) generated by rnn-learn. To evaluate the Kullback-Leibler divergence, the output and data are discretized with respect to \`block-length' and \`divide-num'.
EOS
}


while getopts s:n:c:t:b:d:r:vh OPT
do
    case $OPT in
        s ) seed=${OPTARG};;
        n ) length=${OPTARG};;
        c ) samples=${OPTARG};;
        t ) truncate_length=${OPTARG};;
        b ) block_length=${OPTARG};;
        d ) divide_num=${OPTARG};;
        r ) rnn_file=${OPTARG};;
        v ) echo "$program version 1.0"
            exit 0;;
        h ) display_usage
            exit 0;;
        \?) exit 1;;
    esac
done

shift `expr $OPTIND - 1`

for file in $@
do
    if [ ! -f "$file" ]; then
        echo "No such file or directory: $file"
        exit 1
    fi
done

if [ ! -f "$rnn_file" ]; then
    echo "cannot find rnn-file \`$rnn_file'"
    exit 1
fi

python `dirname $0`/rnn_kl_div.py "$seed" "$length" "$samples" "$truncate_length" "$block_length" "$divide_num" "$rnn_file" $@

